[versions]
agp = "8.1.0"
kotlin = "1.8.20"
coreKtx = "1.9.0"
appcompat = "1.6.1"
material = "1.9.0"
junit = "4.13.2"
androidxTestExtJunit = "1.1.5"
espressoCore = "3.5.1"
composeBom = "2023.03.00"
ui = "1.3.3"
uiGraphics = "1.3.3"
uiToolingPreview = "1.3.3"
material3 = "1.1.1"
uiTestJunit4 = "1.3.3"
uiTooling = "1.3.3"
uiTestManifest = "1.3.3"
retrofitCore = "2.9.0"
retrofitKotlinSerializationConverter = "0.8.0"
kotlinxSerializationJson = "1.3.2"
okhttp3Core = "4.9.0"
okhttp3Logging = "4.9.0"
hiltAndroid = "2.44"
hiltCompiler = "2.44"
lifecycleRuntimeCompose = "2.6.1"
activityCompose = "1.7.0"
lifecycleViewmodelCompose = "2.6.1"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-test-ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidxTestExtJunit" }
espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
ui = { group = "androidx.compose.ui", name = "ui", version.ref = "ui" }
ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics", version.ref = "uiGraphics" }
ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview", version.ref = "uiToolingPreview" }
material3 = { group = "androidx.compose.material3", name = "material3", version.ref = "material3" }
ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4", version.ref = "uiTestJunit4" }
ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling", version.ref = "uiTooling" }
ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest", version.ref = "uiTestManifest" }
retrofit-core = { group = "com.squareup.retrofit2", name = "retrofit", version.ref = "retrofitCore" }
retrofit-kotlin-serialization = { group = "com.jakewharton.retrofit", name = "retrofit2-kotlinx-serialization-converter", version.ref = "retrofitKotlinSerializationConverter" }
kotlinx-serialization-json = { group = "org.jetbrains.kotlinx", name = "kotlinx-serialization-json", version.ref = "kotlinxSerializationJson" }
okhttp3-core = { group = "com.squareup.okhttp3", name = "okhttp", version.ref = "okhttp3Core" }
okhttp3-logging = { group = "com.squareup.okhttp3", name = "logging-interceptor", version.ref = "okhttp3Logging" }
hilt-android = { group = "com.google.dagger", name = "hilt-android", version.ref = "hiltAndroid" }
hilt-compiler = { group = "com.google.dagger", name = "hilt-compiler", version.ref = "hiltCompiler" }
androidx-lifecycle-runtime-compose = { group = "androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "lifecycleRuntimeCompose" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-lifecycle-viewmodel-compose = { group = "androidx.lifecycle", name = "lifecycle-viewmodel-compose", version.ref = "lifecycleViewmodelCompose" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
hilt-android = { id = "com.go            - nombre: Caché
  usos: acciones/cache@v4.2.3
  con:
    # Una lista de archivos, directorios y patrones comodín para almacenar en caché y restaurar
    camino:
    # Una clave explícita para restaurar y guardar el caché
    llave:
    # Una cadena multilínea ordenada que enumera las claves con prefijo coincidente, que se utilizan para restaurar la caché obsoleta si no se ha encontrado ninguna coincidencia con la clave. Nota: `cache-hit` devuelve falso en este caso.
    restaurar-claves: # opcional
    # El tamaño del fragmento utilizado para dividir archivos grandes durante la carga, en bytes
    tamaño del fragmento de carga: # opcional
    # Un valor booleano opcional, cuando está habilitado, permite que los ejecutores de Windows guarden o restauren cachés que se pueden restaurar o guardar respectivamente en otras plataformas
    enableCrossOsArchive: # opcional, el valor predeterminado es falso
    # El flujo de trabajo falla si no se encuentra la entrada de caché
    fail-on-cache-miss: # opcional, el valor predeterminado es falso
    # Verifica si existe una entrada de caché para las entradas dadas (clave, claves de restauración) sin descargar el caché
    solo búsqueda: # opcional, el valor predeterminado es falso
    # Ejecute el paso posterior para guardar el caché incluso si falla otro paso anterior
    guardar siempre: # opcional, el valor predeterminado es falso
          ogle.dagger.hilt.android", version.ref = "hiltAndroid" }LiaApp/
├── app/
│   ├── build.gradle.kts           // Configuraciones de Gradle para el módulo app
│   ├── libs/                     // Dependencias locales (si las hay)
│   ├── proguard-rules.pro        // Reglas de ProGuard
│   └── src/
│       ├── main/
│       │   ├── AndroidManifest.xml  // Archivo de manifiesto
│       │   ├── java/
│       │   │   └── com/lia/
│       │   │       ├── LiaApp.kt    // Clase principal de la aplicación
│       │   │       ├── core/         // Clases base y utilidades
│       │   │       │   ├── Constants.kt
│       │   │       │   └── Extensions.kt
│       │   │       ├── data/         // Manejo de datos
│       │   │       │   ├── GeminiApi.kt  // Interfaz para la API de Gemini
│       │   │       │   └── DataStoreManager.kt  // Para persistencia local
│       │   │       ├── ai/           // Lógica de IA
│       │   │       │   └── GeminiHandler.kt // Maneja las llamadas a Gemini
│       │   │       ├── ui/           // Interfaz de usuario
│       │   │       │   ├── MainScreen.kt // Pantalla principal
│       │   │       │   ├── Theme.kt    // Definiciones de tema
│       │   │       │   └── Components.kt // Componentes reutilizables
│       │   │       └── voice/        // Procesamiento de voz
│       │   │           ├── SpeechRecognizerManager.kt
│       │   │           └── TextToSpeechManager.kt
│       │   └── res/                // Recursos
│       │       ├── drawable/       // Imágenes y vectores
│       │       ├── layout/         // Archivos XML de diseño (si es necesario)
│       │       ├── mipmap-anydpi-v26/ // Iconos adaptativos
│       │       ├── values/         // Valores (strings, colors, themes)
│       │       │   ├── colors.xml
│       │       │   ├── strings.xml
│       │       │   └── themes.xml
│       │       └── xml/            // Configuraciones XML
│       └── test/                 // Pruebas unitarias
├── build.gradle.kts               // Configuraciones de Gradle para el proyecto
├── gradle.properties            // Propiedades de Gradle
├── settings.gradle.kts           // Configuraciones de los módulos
└── .gitignore                   // Archivos ignorados por Git
